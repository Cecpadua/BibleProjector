name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Delete existing release if exists
      continue-on-error: true
      run: |
        gh release delete ${{ steps.version.outputs.VERSION }} --yes || echo "Release does not exist"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: CECPÂú£ÁªèÊäïÂΩ± ${{ steps.version.outputs.VERSION }}
        body: |
          # CECPÂú£ÁªèÊäïÂΩ± ${{ steps.version.outputs.VERSION }}
          
          ## üìã ÂäüËÉΩÁâπÊÄß
          
          - ‚úÖ Âú£ÁªèÁªèÊñáÊäïÂΩ±ÊòæÁ§∫
          - ‚úÖ Ëá™ÂÆö‰πâÈîÆÁõòÂø´Êç∑ÈîÆ
          - ‚úÖ Â§öÂ±èÂπïÊîØÊåÅ
          - ‚úÖ ÊñáÂ≠óÊ†∑ÂºèËá™ÂÆö‰πâ
          - ‚úÖ ËÉåÊôØÂõæÁâáÊîØÊåÅ
          - ‚úÖ ÂÆûÊó∂È¢ÑËßàÂäüËÉΩ
          
          ## üì¶ ‰∏ãËΩΩËØ¥Êòé
          
          ËØ∑Ê†πÊçÆÊÇ®ÁöÑÊìç‰ΩúÁ≥ªÁªüÈÄâÊã©ÂØπÂ∫îÁöÑÂÆâË£ÖÂåÖÔºö
          
          ### Windows Áî®Êà∑
          - **Êé®Ëçê**: `CECP-Bible-Projection-Setup-${{ steps.version.outputs.VERSION }}.exe` (ÂÆâË£ÖÁâà)
          - **‰æøÊê∫Áâà**: `CECP-Bible-Projection-${{ steps.version.outputs.VERSION }}-x64.zip` (ÂÖçÂÆâË£Ö)
          
          ### macOS Áî®Êà∑
          - **Intel ËäØÁâá**: `CECPÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}-mac-x64.dmg`
          - **Apple Silicon (M1/M2)**: `CECPÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}-mac-arm64.dmg`
          - **ÈÄöÁî®Áâà**: `CECPÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}-mac-universal.dmg`
          
          ### Linux Áî®Êà∑
          - **AppImage** (Êé®Ëçê): `CECPÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}.AppImage`
          - **Debian/Ubuntu**: `cecpÂú£ÁªèÊäïÂΩ±_${{ steps.version.outputs.VERSION }}_amd64.deb`
          - **RedHat/CentOS**: `cecpÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}.x86_64.rpm`
          
          ## üöÄ ÂÆâË£ÖÊåáÂçó
          
          ### Windows
          1. ‰∏ãËΩΩ `.exe` ÂÆâË£ÖÂåÖ
          2. Âè≥ÈîÆÈÄâÊã©"‰ª•ÁÆ°ÁêÜÂëòË∫´‰ªΩËøêË°å"
          3. ÊåâÁÖßÂÆâË£ÖÂêëÂØºÂÆåÊàêÂÆâË£Ö
          
          ### macOS
          1. ‰∏ãËΩΩÂØπÂ∫îÁöÑ `.dmg` Êñá‰ª∂
          2. ÂèåÂáªÊâìÂºÄÔºåÂ∞ÜÂ∫îÁî®ÊãñÊãΩÂà∞"Â∫îÁî®Á®ãÂ∫è"Êñá‰ª∂Â§π
          3. È¶ñÊ¨°ËøêË°åÊó∂ÔºåËØ∑Âú®"Á≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆ" ‚Üí "ÂÆâÂÖ®ÊÄß‰∏éÈöêÁßÅ"‰∏≠ÂÖÅËÆ∏ËøêË°å
          
          ### Linux
          #### AppImage ÊñπÂºè
          ```bash
          chmod +x CECPÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}.AppImage
          ./CECPÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}.AppImage
          ```
          
          #### Debian/Ubuntu
          ```bash
          sudo dpkg -i cecpÂú£ÁªèÊäïÂΩ±_${{ steps.version.outputs.VERSION }}_amd64.deb
          sudo apt-get install -f  # Â¶ÇÊûúÊúâ‰æùËµñÈóÆÈ¢ò
          ```
          
          #### RedHat/CentOS/Fedora
          ```bash
          sudo rpm -i cecpÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}.x86_64.rpm
          ```
          
          ## üîß Á≥ªÁªüË¶ÅÊ±Ç
          
          - **Windows**: Windows 10 ÊàñÊõ¥È´òÁâàÊú¨
          - **macOS**: macOS 10.13 ÊàñÊõ¥È´òÁâàÊú¨
          - **Linux**: Ubuntu 18.04+, CentOS 7+, ÊàñÂÖ∂‰ªñÁé∞‰ª£ Linux ÂèëË°åÁâà
          
          ## üìû ÊäÄÊúØÊîØÊåÅ
          
          Â¶ÇÊûúÊÇ®Âú®‰ΩøÁî®ËøáÁ®ã‰∏≠ÈÅáÂà∞ÈóÆÈ¢òÔºåËØ∑Âú® GitHub Issues ‰∏≠ÂèçÈ¶à„ÄÇ
          
          ---
          
          *Ê≠§ÁâàÊú¨Áî± GitHub Actions Ëá™Âä®ÊûÑÂª∫ÂíåÂèëÂ∏É*
        draft: false
        prerelease: false

  build:
    needs: create-release
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
          - os: macos-latest
            platform: mac
            arch: universal
          - os: ubuntu-latest
            platform: linux
            arch: x64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Extract version
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Install dependencies
      run: npm ci
    
    - name: Update version in package.json
      shell: bash
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        VERSION_NO_V="${VERSION#v}"
        npm version $VERSION_NO_V --no-git-tag-version
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libgtk-3-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        npm install dmg-license --no-save || echo "dmg-license installation failed, continuing without it"

    - name: Build for Windows
      if: matrix.platform == 'win'
      run: npm run build:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build for macOS
      if: matrix.platform == 'mac'
      run: npm run build:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
    
    - name: Build for Linux
      if: matrix.platform == 'linux'
      run: npm run build:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: List build output
      shell: bash
      run: |
        echo "Build output directory contents:"
        ls -la dist/ || echo "No dist directory found"
        find dist/ -type f -name "*" 2>/dev/null || echo "No files in dist/"
        echo "Looking for Windows installer:"
        find dist/ -name "*.exe" 2>/dev/null || echo "No .exe files found"
        echo "Looking for Windows zip:"
        find dist/ -name "*.zip" 2>/dev/null || echo "No .zip files found"
        echo "Looking for macOS DMG:"
        find dist/ -name "*.dmg" 2>/dev/null || echo "No .dmg files found"
        echo "Looking for Linux AppImage:"
        find dist/ -name "*.AppImage" 2>/dev/null || echo "No .AppImage files found"
        echo "=== Debug: All file names in dist ==="
        find dist/ -type f -exec basename {} \; 2>/dev/null | sort || echo "No files found"
    
    # ‰∏ä‰º† Windows ÊûÑÂª∫‰∫ßÁâ©
    - name: Upload Windows installer
      if: matrix.platform == 'win'
      shell: bash
      run: |
        EXE_FILE=$(find dist/ -name "*.exe" | head -n 1)
        if [ -n "$EXE_FILE" ]; then
          FILENAME=$(basename "$EXE_FILE")
          echo "Found installer: $EXE_FILE (filename: $FILENAME)"
          echo "Will upload as: CECP-Bible-Projection-Setup-${{ steps.version.outputs.VERSION }}.exe"
          
          # Upload with unified naming
          if curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$EXE_FILE" \
            "${{ needs.create-release.outputs.upload_url }}?name=CECP-Bible-Projection-Setup-${{ steps.version.outputs.VERSION }}.exe"; then
            echo "Successfully uploaded Windows installer"
          else
            echo "Failed to upload Windows installer"
          fi
        else
          echo "No .exe installer found"
        fi
      continue-on-error: true
    
    - name: Upload Windows portable
      if: matrix.platform == 'win'
      shell: bash
      run: |
        ZIP_FILE=$(find dist/ -name "*.zip" | head -n 1)
        if [ -n "$ZIP_FILE" ]; then
          echo "Found zip: $ZIP_FILE"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/zip" \
            --data-binary @"$ZIP_FILE" \
            "${{ needs.create-release.outputs.upload_url }}?name=CECP-Bible-Projection-${{ steps.version.outputs.VERSION }}-win-x64.zip"
        else
          echo "No .zip file found"
        fi
      continue-on-error: true
    
    # ‰∏ä‰º† macOS ÊûÑÂª∫‰∫ßÁâ©
    - name: Upload macOS DMG
      if: matrix.platform == 'mac'
      shell: bash
      run: |
        DMG_FILE=$(find dist/ -name "*.dmg" | head -n 1)
        if [ -n "$DMG_FILE" ]; then
          echo "Found DMG: $DMG_FILE"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$DMG_FILE" \
            "${{ needs.create-release.outputs.upload_url }}?name=CECPÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}-mac-universal.dmg"
        else
          echo "No .dmg file found"
        fi
      continue-on-error: true
    
    # ‰∏ä‰º† Linux ÊûÑÂª∫‰∫ßÁâ©
    - name: Upload Linux AppImage
      if: matrix.platform == 'linux'
      shell: bash
      run: |
        APPIMAGE_FILE=$(find dist/ -name "*.AppImage" | head -n 1)
        if [ -n "$APPIMAGE_FILE" ]; then
          echo "Found AppImage: $APPIMAGE_FILE"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$APPIMAGE_FILE" \
            "${{ needs.create-release.outputs.upload_url }}?name=CECPÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}.AppImage"
        else
          echo "No .AppImage file found"
        fi
      continue-on-error: true
    
    - name: Upload Linux DEB
      if: matrix.platform == 'linux'
      shell: bash
      run: |
        DEB_FILE=$(find dist/ -name "*.deb" | head -n 1)
        if [ -n "$DEB_FILE" ]; then
          echo "Found DEB: $DEB_FILE"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/vnd.debian.binary-package" \
            --data-binary @"$DEB_FILE" \
            "${{ needs.create-release.outputs.upload_url }}?name=cecpÂú£ÁªèÊäïÂΩ±_${{ steps.version.outputs.VERSION }}_amd64.deb"
        else
          echo "No .deb file found"
        fi
      continue-on-error: true
    
    - name: Upload Linux RPM
      if: matrix.platform == 'linux'
      shell: bash
      run: |
        RPM_FILE=$(find dist/ -name "*.rpm" | head -n 1)
        if [ -n "$RPM_FILE" ]; then
          echo "Found RPM: $RPM_FILE"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/x-rpm" \
            --data-binary @"$RPM_FILE" \
            "${{ needs.create-release.outputs.upload_url }}?name=cecpÂú£ÁªèÊäïÂΩ±-${{ steps.version.outputs.VERSION }}.x86_64.rpm"
        else
          echo "No .rpm file found"
        fi
      continue-on-error: true
    
    # ‰∏ä‰º†ÊâÄÊúâÊûÑÂª∫‰∫ßÁâ©‰Ωú‰∏∫Â§á‰ªΩ
    - name: Upload all artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/
        retention-days: 30
